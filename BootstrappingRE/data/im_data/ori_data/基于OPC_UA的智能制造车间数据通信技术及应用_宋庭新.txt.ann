基于opcua的[@智能制造#政策技术*]车间[@数据#政策技术*][@通信#政策技术*]技术及[@应用#政策技术*]摘要:为实现多种设备的[@数据#政策技术*][@通信#政策技术*]和[@统一#技术特点*]信息管理,提出了一种基于opc[@统一#技术特点*]架构(opcua)的[@智能制造#政策技术*]车间[@数据#政策技术*][@通信#政策技术*]技术,对其[@通信#政策技术*]原理和[@网络#政策技术*]架构进行了讨论,提出了opcua与[@工业机器人#政策技术*]操作系统ros和[@传感器#政策技术*]嵌入式系统等设备的整合方案,并在案例研究中[@详细#技术特点*]讨论了基于python语言的[@数据#政策技术*][@通信#政策技术*]程序设计方法,开发了基于opcua的车间制造执行层(mes)[@机器人#政策技术*]监控模块。
实际[@应用#政策技术*]结果表明,基于opcua的[@数据#政策技术*][@通信#政策技术*]技术具有很高的通用性和兼容性,可有效实现智能车间设备信息的[@数据#政策技术*][@集成#技术特点*]和[@统一#技术特点*]管理。
关键词:opc[@统一#技术特点*]架构;[@数据#政策技术*][@通信#政策技术*];[@机器人#政策技术*]操作系统;[@智能制造#政策技术*];[@信息物理系统#政策技术*]0引言[@工业4.0#政策技术*]的提出极大推动了[@制造业#应用领域*]的发展,伴随着[@工业4.0#政策技术*]的浪潮,[@制造业#应用领域*][@信息化#技术特点*]迅速发展,车间的[@智能化#技术特点*]程度日益增强,车间[@智能化#技术特点*]与车间内的[@智能化#技术特点*]设备有着直接的联系。
伴随车间[@智能化#技术特点*]程度的提高,车间设备也更加多元化,如[@数控机床#政策技术*]、[@工业机器人#政策技术*]、[@agv#政策技术*]、嵌入式系统设备等。
种类各异的底层设备也给车间[@数据#政策技术*]采集与传输带来了如下难点:①对于[@智能化#技术特点*][@物联网#政策技术*]车间,底层设备种类繁多,其[@通信#政策技术*]协议也各不相同,使得车间的[@数据#政策技术*]采集和[@通信#政策技术*]系统的整合所需要的成本投入十分巨大;②对于各种车间信息管理系统,不同协议的信息传输直接影响各个层次间[@数据#政策技术*][@通信#政策技术*]的[@统一#技术特点*]管理,而这正是车间信息管理系统所追求的目标;③由于没有[@统一#技术特点*]的[@通信#政策技术*]协议,车间制造执行系统在设计时,只能被动地[@集成#技术特点*]各种不同的[@通信#政策技术*]协议,进而与底层设备相适配,这无疑提高了系统开发的难度,阻碍了整个车间[@信息化#技术特点*]建设。
所以,在[@工业4.0#政策技术*][@万物互联#技术特点*]的要求下,在智能车间内不同的设备之间建立一种简单可靠的[@统一#技术特点*][@通信#政策技术*]模式具有重要意义,而过程控制[@统一#技术特点*]对象模型(oleforprocesscontrolunifiedarchitecture,opcua)技术可以很好地解决上述问题。
opcua是一个开放的跨平台架构,由全世界30多家知名制造[@企业#事业单位*]联合开发,目前已成为[@工业4.0#政策技术*]中的[@通信#政策技术*]标准。
opcua协议不受限于操作系统,具有很强的独立性,并且拥有很高的安全保护机制,可以确保信息[@通信#政策技术*]安全可靠。
opcua还能支持各类设备复杂的[@数据#政策技术*]结构[@通信#政策技术*],通过将设备的各种[@数据#政策技术*]以及结构节点封装为对象来对设备信息模型进行描述,以此来实现复杂[@数据#政策技术*]结构的[@通信#政策技术*]。
同时,opcua[@服务器#政策技术*]可以通过将底层设备的[@实时#技术特点*][@数据#政策技术*]传输给opcua客户端,并提供历史[@数据#政策技术*]查询来实现设备的远程监控[1]。
刘洋等[2]对基于消息[@代理#技术特点*]的opcua发布订阅模式进行了研究。
王民等[3]对基于opcua的[@数字化#技术特点*]车间信息交互模型进行了研究。
顾岩等[4]设计了基于opcua的3d[@实时#技术特点*]监控系统。
在[@企业#事业单位*][@应用#政策技术*]方面,[@abb#事业单位*]、爱默生、罗克威尔、[@西门子#事业单位*]等[@企业#事业单位*]已经实现了opcua[@应用#政策技术*]程序的开发和[@应用#政策技术*]。
[@德国#事业单位*]在“阿尔法文图斯”海上风电厂并网发电项目中采用opcua技术,在scada系统中进行[@数据#政策技术*]采集和监控[5]。
近年,[@国外#应用领域*]一些[@自动化设备#政策技术*]大厂(如[@西门子#事业单位*])已经将opcua的整套[@服务#政策技术*][@集成#技术特点*]在产品之中,但这些opcua系统较为封闭,不适合二次开发。
与[@国外#应用领域*]相比,opcua在[@我国#事业单位*]的[@应用#政策技术*]还处于初级阶段。
目前国内市场上还很少看到成熟的opcua产品,但opcua技术已被国内许多[@工业控制#应用领域*][@软件#政策技术*]开发者所认可,opcua技术在[@智能制造#政策技术*]车间的[@应用#政策技术*]前景十分广泛[6]。
本文提出了一种基于opcua的车间[@信息物理系统#政策技术*][@通信#政策技术*]架构,实现了车间设备的[@数据#政策技术*]采集和[@通信#政策技术*],为[@智能制造#政策技术*]车间提供了一种更为安全可靠的[@通信#政策技术*]机制。
1基于opcua的[@数据#政策技术*][@通信#政策技术*][@网络#政策技术*]架构1.1opcua的[@通信#政策技术*]模式opcua是一种不依赖于平台且具有更高安全性和可靠性的标准。
opcua为[@自动化生产#应用领域*]系统提供了新的信息模型和抽象体系结构,构建了一个[@统一#技术特点*]的对象模型,解决了平台依赖关系问题,添加了命名空间机制,并将复杂的[@数据#政策技术*]类型嵌入[@服务器#政策技术*]地址空间中,同时还能支持大量的通用[@服务#政策技术*]。
opcua技术使用面向[@服务#政策技术*]的体系结构(service-orientedarchitecture,soa)来实现[@数据#政策技术*]交换,通过[@通信#政策技术*]堆栈发送信息,支持用于[@通信#政策技术*]的http/uatcp协议,只要端口允许,opcua就可以通过任何端口发送[@数据#政策技术*]。
地址空间是opcua的核心概念,组成地址空间的基本单位是节点,即实际设备在地址空间中的映射,地址空间为各类设备提供了[@统一#技术特点*]的抽象模型,通过抽象模型实现了对节点的[@统一#技术特点*]管理[7-9]。
节点由属性与引用两部分构成,节点的结构和节点之间的关系如图1所示。
[@数据#政策技术*]编码就是将包含其自身输入和输出参数的[@服务#政策技术*]消息序列化为[@网络#政策技术*]格式。
目前,opcua规定了两种编码方法,即ua二进制编码和xml编码。
在[@工业控制#应用领域*]系统中,[@实时#技术特点*]性能和生产线开销往往是人们关注的一个重要问题。
随着设备整合的高速发展,[@数据#政策技术*]传输量日益增加,因此,ua工作组为适应[@工业#应用领域*]领域的环境定义了ua二进制代码。
ua的二进制编码只占用[@数据#政策技术*]线上的较小体积并能实现高速[@数据#政策技术*]编码和解码。
opcua映射到[@通信#政策技术*]协议(例如tcp传输控制协议),能以不同形式的编码(例如,ua二进制格式或xml等)发送[@数据#政策技术*],并且可以标准化各种系统和设备接口,以便在所有[@网络#政策技术*]中实现它们之间的无障碍[@通信#政策技术*]。
由于opcua基于tcp/ip协议,采用三次握手原则来建立[@通信#政策技术*],故确保了[@数据#政策技术*]传输的可靠性。
opcua[@通信#政策技术*]模式如图2所示。
1.2opcua信息交互[@网络#政策技术*]架构将opcua技术运用于车间的实现方法是将opcua[@服务器#政策技术*]嵌入各类底层设备之中,对各类底层设备所采集的[@数据#政策技术*]通过[@服务器#政策技术*]转换为支持opcua协议的[@数据#政策技术*]。
当车间制造执行层(manufaturingexecutionsystem,mes)从[@数据#政策技术*]采集与监控(supervisorycontrolanddataacquisition,scada)系统获取[@数据#政策技术*]或信息时[10],采用联合[@服务器#政策技术*]和客户端的概念,opcua客户端和opcua[@服务器#政策技术*]之间的[@通信#政策技术*]使用请求/响应机制。
当[@服务器#政策技术*]调用[@服务#政策技术*]时,客户端必须向[@服务器#政策技术*]发送请求消息。
处理完请求后,[@服务器#政策技术*]将回复消息发送回客户端。
在客户端和[@服务器#政策技术*]之间发送的信息和[@数据#政策技术*]必须首先通过相应的消息模式的格式检查,并由客户端或[@服务器#政策技术*]通过适当的分析来获取所需的信息。
基于opcua的信息交互[@网络#政策技术*]框架如图3所示。
opcua信息交互[@网络#政策技术*]架构分为以下3层:①底层。
底层是由生产加工设备、生产辅助设备和[@传感器#政策技术*]构成的设备层。
在这一层,设备的基本[@数据#政策技术*]和状态[@数据#政策技术*]首先封装在opcua[@服务器#政策技术*]中,然后通过opcua的订阅/发布或查询模式传输到高层的[@应用#政策技术*]程序。
②[@通信#政策技术*]层。
[@通信#政策技术*]层连接底层设备和管理信息系统,连接[@企业#事业单位*]外部的[@互联网#政策技术*]和各种云[@应用#政策技术*],同时,[@通信#政策技术*]层的设备控制[@网络#政策技术*]和[@企业#事业单位*]信息[@网络#政策技术*]也向[@融合#技术特点*]的方向发展。
③信息管理层。
该层的作用是根据车间业务流程的需要,通过opcua客户端收集设备层的[@数据#政策技术*],存储在[@企业#事业单位*]本地[@数据#政策技术*]库、云[@数据#政策技术*]库或其他[@应用#政策技术*]系统中,从而实现[@企业#事业单位*]资源计划(enterpriseresourc[@eplan#事业单位*]ning,erp)、mes的业务[@应用#政策技术*]。
从该[@数据#政策技术*]采集框架中可以看出,opcua不仅仅是[@工业#应用领域*]领域通用的[@数据#政策技术*]传输标准,而且,它还通过信息模型的封装实现了[@智能制造#政策技术*]车间各层之间的[@数据#政策技术*]语义[@统一#技术特点*],因此,opcua又被称为[@工业4.0#政策技术*]的基础,对实现车间[@信息物理系统#政策技术*](cyberphysicalsystem,[@cps#政策技术*])具有重要的作用[11-14]。
2基于opcua的车间[@数据#政策技术*][@通信#政策技术*]的实现在实际的车间生产过程中,使用的[@自动化设备#政策技术*]不尽相同,所产生的[@数据#政策技术*]类型也种类繁多,给车间的设备监控和[@信息化#技术特点*]管理带来很大的障碍,为了将这些底层[@数据#政策技术*][@统一#技术特点*]进行传输和管理,本文选用opcua技术来完成这一目标。
但是对于中小[@企业#事业单位*],采用opcua技术进行[@数据#政策技术*]交互[@通信#政策技术*]往往需要购买专业化设备,并使用配套的[@通信#政策技术*]模块,这对于中小[@企业#事业单位*]来说成本较高,难以实施,故本文提出一种适合于中小[@企业#事业单位*]的基于opcua技术的车间信息[@通信#政策技术*]方案。
对于底层设备,[@数据#政策技术*]采集往往使用c/c++语言编程来实现,而对于上层的监控系统和web[@应用#政策技术*],往往采用java语言编程实现,为了方便结合这两种语言,本文采用python语言来实现opcua编程。
2.1[@数据#政策技术*][@通信#政策技术*]流程基于opcua架构的车间[@数据#政策技术*][@通信#政策技术*]的设计思想如下:将种类繁多的底层设备如[@机器人#政策技术*]、[@传感器#政策技术*]、[@plc#政策技术*]设备、[@数控机床#政策技术*]、[@agv#政策技术*]等所采集到的[@数据#政策技术*]全部采用opcua格式标准进行封装和传输,以此来[@统一#技术特点*]管理底层设备信息,通过opcua[@统一#技术特点*]架构存入[@数据#政策技术*]库中,再由mes、erp等上层[@应用#政策技术*]系统来调用,完成对底层设备的监控和业务[@应用#政策技术*],也可以将这些信息存入云端,供今后进行[@大数据#政策技术*]分析使用。
基于opcua架构的车间[@数据#政策技术*]采集系统如图4所示。
图4中,车间[@数据#政策技术*][@通信#政策技术*]的具体流程如下:①对每个不同的底层设备所需要传递的信息分别建立信息模型结构,确定需要对外暴露的信息以及信息的层级结构;②根据所需要的底层设备信息在[@数据#政策技术*]中心构建[@数据#政策技术*]库;③使用python语言,调用opcuaapi,针对不同的底层设备建立对应的opcua[@服务器#政策技术*];④将需要传输的底层设备[@数据#政策技术*]根据信息模型装入opcua[@服务器#政策技术*]的节点中,使用opcua[@通信#政策技术*]协议将[@数据#政策技术*]封装发出;⑤在上层信息管理系统中,使用python语言构建opcua客户端,对底层传输来的信息进行解析,然后将其存入[@数据#政策技术*]库;⑥上层[@应用#政策技术*]系统从[@数据#政策技术*]库中读取[@数据#政策技术*],完成设备监控和业务[@应用#政策技术*]操作。
[@数据#政策技术*][@通信#政策技术*]流程如图5所示。
2.2opcua与ros的结合在[@智能化#技术特点*]工厂中,[@工业机器人#政策技术*]的使用得到了广泛的普及,[@工业机器人#政策技术*]操作系[@统一#技术特点*]般使用ros(robotoperatingsystem)。
ros系统是由[@斯坦福大学#事业单位*][@人工智能#政策技术*]实验室开发的基于linux系统的[@机器人#政策技术*][@软件#政策技术*]控制平台,不同于传统的linux操作系统,ros属于二级操作系统,它提供了一个结构化的[@通信#政策技术*]层。
作为[@机器人#政策技术*]操作平台,ros[@通信#政策技术*]主要有以下特点:①节点。
节点是ros执行各种功能的程序进程,进程以节点的形式运行。
节点之间的[@通信#政策技术*]是通过消息的发布和订阅来实现的;②消息。
消息是节点间[@通信#政策技术*]的内容。
ros支持多种消息类型,如pointcloud、map信息等[15]。
③主题。
主题是指特定消息的名称,用于描述消息的内容。
节点可以发布某个主题的[@数据#政策技术*]消息,或者订阅某个主题的[@数据#政策技术*]。
④[@服务#政策技术*]。
[@服务#政策技术*]和主题之间的区别在于主题可以由多个节点订阅,但是[@服务#政策技术*]在形式上是一对一的,即在节点之间建立[@服务#政策技术*]之后,它的[@通信#政策技术*]模式通常是一种请求模式和一种响应模式[16]。
ros与许多编程语言兼容,如c/c++、python、java、lisp等。
它还具有跨语言和跨平台的能力,大大提升了[@机器人#政策技术*]开发的可移植性,使得[@机器人#政策技术*]开发变得更加便捷。
图6所示为ros中话题和节点之间的关系。
鉴于ros的上述特点,尤其是跨平台性以及节点[@通信#政策技术*]和消息发布订阅模式,非常适合与opcua架构相结合。
ros系统与opcua结合[@通信#政策技术*]思路如下:在ros系统中将需要传输的[@数据#政策技术*]作为话题发布,再对这些话题进行订阅,将订阅得到的话题中的[@数据#政策技术*]进行封装,放到opcua[@服务器#政策技术*]的节点中,再根据建立的信息模型对这些节点进行封装,利用opcua[@通信#政策技术*]协议传输到上层,由上层的opcua客户端对信息进行解析后存入[@数据#政策技术*]库。
2.3opcua与[@传感器#政策技术*]的结合在[@智能制造#政策技术*]车间中,还存在着大量的[@传感器#政策技术*],这些[@传感器#政策技术*]所采集到的设备[@数据#政策技术*]往往存在于嵌入式系统中,如树莓派、arm等,也很有必要被[@统一#技术特点*]化管理。
opcua与[@传感器#政策技术*]结合进行[@数据#政策技术*][@通信#政策技术*]的思路如下:将[@传感器#政策技术*]连接树莓派等[@硬件系统#政策技术*],并在树莓派系统中[@集成#技术特点*]opcua[@服务器#政策技术*],对[@传感器#政策技术*]所采集的[@数据#政策技术*]进行建模,并将这些[@数据#政策技术*]封装到opcua[@服务器#政策技术*]节点中,与上层opcua客户端通过opcua协议[@通信#政策技术*],这样便实现了[@传感器#政策技术*][@数据#政策技术*]的[@统一#技术特点*][@通信#政策技术*]管理。
以转速[@传感器#政策技术*]为例,可以将该[@传感器#政策技术*]与树莓派[@硬件#政策技术*]开发板相连接,使用c语言编程实现[@数据#政策技术*]采集,然后将该c语言代码作为python的api库进行加载,在python代码中根据实际需求建立opcua客户端,将采集到的[@数据#政策技术*]进行封装,然后使用opcua协议进行[@通信#政策技术*]。
不论[@工业机器人#政策技术*]ros系统,还是底层[@传感器#政策技术*]嵌入式设备,或者[@数控机床#政策技术*]、[@plc#政策技术*]、[@agv#政策技术*]等,都可以使用opcua进行[@通信#政策技术*]。
使用opcua可以很好地兼容各类底层设备及其操作系统,对这些设备的[@数据#政策技术*]进行整合,真正实现只用一种[@通信#政策技术*]方式就能够[@统一#技术特点*][@智能工厂#政策技术*]多设备多类型的[@数据#政策技术*]采集和[@通信#政策技术*],为[@智能工厂#政策技术*]的[@信息化#技术特点*]管理提供了很大便利。
基于opcua架构的[@智能工厂#政策技术*][@通信#政策技术*]架构图见图7。
图7中,该工厂底层设备由[@agv#政策技术*]小车、[@数控机床#政策技术*]、[@机器人#政策技术*]、[@plc#政策技术*]设备和[@传感器#政策技术*]构成,这些底层设备全都[@集成#技术特点*]了opcua[@服务器#政策技术*]。
将设备所采集到的信息封装入opcua[@服务器#政策技术*]中,使用opcua[@通信#政策技术*]协议通过wifi与opcua客户端进行[@通信#政策技术*],实现了多种[@数据#政策技术*]类型的[@通信#政策技术*][@统一#技术特点*],opcua客户端得到底层[@数据#政策技术*]后,将[@数据#政策技术*]存放在云端[@数据#政策技术*]中心,供管理信息系统(如mes、erp)使用。
3案例研究某[@智能制造#政策技术*]车间在实施制造执行系统时需要对车间内的数台六轴[@工业机器人#政策技术*]和[@plc#政策技术*]控制设备的运行状态进行[@实时#技术特点*]监控,但对于这些不同厂商生产的[@工业机器人#政策技术*],其控制系统和[@数据#政策技术*]传输方式各不相同,若采用传统的[@数据#政策技术*]采集和[@通信#政策技术*]方式实现[@统一#技术特点*]的[@集成化#技术特点*]管理比较困难。
通过实际调查发现,这些不同厂家的[@工业机器人#政策技术*]都是通过ros系统来实现开发和控制的,[@机器人#政策技术*]运行的各项参数(如关节电机的转速、机械手臂的位置等信息)在ros系统中都可以查询到,因此可以采用opcua[@通信#政策技术*]技术和ros系统结合实现该车间所有[@工业机器人#政策技术*]的监控。
同理,[@plc#政策技术*]、[@传感器#政策技术*]等嵌入式控制设备也可以采用opcua架构来实现[@数据#政策技术*]采集和[@通信#政策技术*]。
基于opcua架构的车间[@数据#政策技术*]采集和[@通信#政策技术*]方案如图8所示。
该框架分为三层,即[@硬件系统#政策技术*]层、[@服务器#政策技术*]层和管理系统层。
[@硬件系统#政策技术*]层包括[@传感器#政策技术*]、[@plc#政策技术*]、[@机器人#政策技术*]、c语言[@数据#政策技术*]采集程序、python获取[@数据#政策技术*]程序、ros系统和opcua[@服务器#政策技术*],[@服务器#政策技术*]层包括opcua客户端和mysql[@数据#政策技术*]库,管理系统层包括客户端pc和mes系统,[@硬件系统#政策技术*]层和[@服务器#政策技术*]层之间通过opcua协议进行[@通信#政策技术*]。
[@数据#政策技术*]在各层间的传递过程如下:首先在[@硬件系统#政策技术*]层中,对于[@传感器#政策技术*]和[@plc#政策技术*],将c语言[@数据#政策技术*]采集程序作为库文件加载到python程序中,然后使用python来调用该程序获取[@传感器#政策技术*][@数据#政策技术*],再将采集到的[@数据#政策技术*]封装入opcua[@服务器#政策技术*]中。
对于ros[@机器人#政策技术*],使用ros系统发布[@机器人#政策技术*]信息话题,再使用python程序订阅该话题,并将[@数据#政策技术*]封装入opcua[@服务器#政策技术*]中。
在[@服务器#政策技术*]层中,opcua客户端通过opcua协议与[@硬件系统#政策技术*]层的opcua[@服务器#政策技术*]进行[@通信#政策技术*],将得到的[@数据#政策技术*]存入mysql[@数据#政策技术*]库中,供管理系统层的mes使用。
基于opcua架构的ros系统[@工业机器人#政策技术*][@通信#政策技术*]流程如图9所示。
首先构建[@机器人#政策技术*]信息模型,再根据所建立的模型使用python语言代码构建opcua[@服务器#政策技术*],使opcua[@服务#政策技术*]节点与[@机器人#政策技术*]信息模型一一对应。
同时在[@机器人#政策技术*]ros系统中将[@机器人#政策技术*]的关节电机转速等信息作为话题进行发布,然后在python代码中对[@机器人#政策技术*]关节话题进行订阅,并将订阅得到的信息存入opcua[@服务器#政策技术*]的对应节点中,opcua[@服务器#政策技术*]与客户端通过opcua协议进行[@通信#政策技术*],opcua客户端获取[@数据#政策技术*]后将[@数据#政策技术*]存放到[@数据#政策技术*]库中,再由erp、mes等[@软件#政策技术*]来使用这些[@数据#政策技术*]。
编程时,opcua[@服务器#政策技术*]先暴露其ip地址和端口号,然后与opcua客户端进行连接,连接成功后使用opcua协议格式[@通信#政策技术*]。
opcua客户端接收[@数据#政策技术*]时,可以直接从opcua[@服务器#政策技术*]定义的信息模型中取出对应的节点[@数据#政策技术*],这些[@数据#政策技术*]对客户端而言是语义已知的,故可以直接存入[@数据#政策技术*]库所建表的对应字段中。
mes等上层[@应用#政策技术*]系统只需从[@数据#政策技术*]库中读取[@数据#政策技术*]即可。
opcua[@服务器#政策技术*]的部分关键python代码如下:server=server()#新建opcua[@服务器#政策技术*];url=“opc.tcp:∥192.168.18.134:4841”server.set_endpoint(url)#定义[@服务器#政策技术*]的地址和端口号;name=“opcua_simulation_server”addspace=server.register_namespace(name)#定义地址空间;node=server.get_objects_node()param=node.add_object(addspace,“parameters”)#定义节点;moto1=param.add_variable(addspace,“moto1”,0)#[@数据#政策技术*]封装入节点;opcua客户端的部分关键代码如下:conn=cx_oracle.connect(‘cjpt/123456@localhost/mes’)#指定所需连接的[@数据#政策技术*]库;url=“opc.tcp:∥192.168.18.134:4841”client=client(url)#指定opcua[@服务器#政策技术*]的地址和端口号;client.connect()#请求连接;#获取节点中的[@数据#政策技术*];whiletrue:mos1=client.get_node(“ns=2;i=2”)motorspeed1=mos1.get_value()print(motorspeed1)上述代码运行后,先在设备端建立opcua[@服务器#政策技术*],并订阅ros系统发布的[@机器人#政策技术*]驱动电机状态话题。
然后,建立opcua客户端,采用循环请求的方式获取[@服务器#政策技术*]中的[@数据#政策技术*]。
[@服务器#政策技术*]与客户端之间采用opcua协议进行[@数据#政策技术*][@通信#政策技术*],确保[@数据#政策技术*]传输的可靠性。
图10所示为采用opcua[@通信#政策技术*]方案实现的该车间[@工业机器人#政策技术*]监控界面。
4结论本文从实际需求出发,创造性地将opcua[@通信#政策技术*]架构与[@工业机器人#政策技术*]ros系统、[@传感器#政策技术*]嵌入式系统以及[@plc#政策技术*]控制系统等进行整合,实现了车间内不同厂家的[@工业机器人#政策技术*]、[@plc#政策技术*]设备、各种嵌入式设备之间的[@数据#政策技术*][@通信#政策技术*]的[@统一#技术特点*]操作,使得车间[@数据#政策技术*]采集和信息传输更加简便可靠。
基于opcua的技术特性,该架构能很好地支持各种[@自动#技术特点*]控制设备的[@通信#政策技术*],具有很高的通用性和兼容性,实现了智能车间设备信息的[@集成#技术特点*]管理,在保证拥有良好性能的同时又兼顾了可扩展性。
与市面上各大公司推出的opcua专用[@通信#政策技术*]模块相比,该架构具有良好的二次开发能力,可以对特定工厂环境进行高度定制开发,并且实施方法简便,成本低廉。
本文研究结果为[@工业4.0#政策技术*]时代车间信息的采集、传输和存储提供了[@统一#技术特点*]的信息传输架构,为实现[@数据#政策技术*]驱动的[@智能制造#政策技术*][@服务#政策技术*]打下了良好基础。
