基于工作流管理的智能制造系统摘要:研究了基于web文挡数据交换的规范xml、动态agent的结构模型,以及“推”、“拉”式作业调度算法,提出了基于工作流管理的智能制造系统结构。
该系统首先把生产任务分解成单件子任务,构建制造过程流向图,根据流向图使用xml定义制造过程工作流文档,中央调度系统调用工作流发放作业任务,生产单元根据自身状态请求作业任务,完成作业后提交输出数据、更新任务目录,实现了制造过程的智能化、自动化。
关键词:xml;动态agent;工作流;作业调度激烈的全球化市场竞争对制造系统提出了更高的要求——制造系统可以在确定性受到限制或没有先验知识与不能预测的环境下完成制造任务,因此一些高度发达的工业化国家提出了智能制造系统(intelligentmanufacturingsystem,ims)。
ims是一种由智能机器和人类专家共同组成的人机一体化智能系统,它在制造过程中能进行智能活动,诸如分析、推理、判断、构思和决策等[1]。
在生产环境中,客户的订单不同生产任务就不同,完成生产任务的工作流就不同,而工作流的变化又往往体现为执行任务的流程和所需要的协作工具的不同。
流程改变要求工作流管理系统能够动态配置,可以根据客户要求的需求,重构制造过程的控制流和数据流,提高系统的柔性、敏捷性和自适应能力;协作工具的改变要求agent的功能够根据作业任务动态变化,为此本文提出动态agent概念,并应用于智能制造系统中各加工站点,实现各加工站点功能改变。
1基于xml的动态agent结构随着人工智能和计算机技术在制造业中的广泛应用,多智能体系统技术对解决产品设计、生产制造乃至产品的整个生命周期中的多领域间的协调合作提供了一种智能化的方法,也为系统集成、并行设计,并实现智能制造提供了更有效的手段。
xml(extensiblemarkuplanguage)是基于web文挡数据交换的规范,为开发人员提供了标识数据结构的框架,支持用于字符编码的许多主要标准,可以在多种平台上使用,而且可以用多种工具解释,允许它在全世界许多不同的计算机环境中使用。
基于xml和动态agent的理论,我们设计出用于智能制造系统的动态agent结构,如图1所示。
动态agent[2]的结构分为固定部分和可变部分。
其中消息队列处理器、xml解析器、通信层和用户图形接口接口为固定部分,数据、知识和功能代码为可变部分。
在智能制造系统中,除了接口agent具有用户图形接口以外,其他的agent结构是相同的。
动态agent使用xml进行通信,xml解释器对需要传送给另一个agent的信息进行分析,然后生成新的含有xml信息,以便进行agent之间的通信。
信息队列负责维护输入和输出该agent的信息状态,这样agent就知道,自己所发出的信息哪一条得到了响应,哪一条还没有得到响应。
agent的数据、知识和功能代码包含了实现agent功能的许多过程和模块。
2基于工作流管理的智能制造系统结构一个工作流管理系统主要由两个组成模块:业务流程建模模块和工作流执行控制模块。
在业务流程建模阶段,工作流管理人员使用过程建模工具对实际业务流程进行分析、建模,将业务流程表示为计算机可处理的形式化表示,称为过程定义或过程模型。
工作流执行控制模块为过程定义的执行提供一个运行环境。
当启动一个工作流时,工作流执行服务创建一个或多个工作流引擎,它负责解释过程定义并创建过程实例、调度各个活动步骤、为用户生成工作项以及跟踪监控工作流的执行等等[3,4]。
根据前面提到动态agent的理论,提出一个基于工作流管理的智能制造系统结构,系统的分布结构如图2。
由图2看出,系统由业务流程建模模块、工作流执行控制模块(包括工作流引擎、跟踪检测服务、簿记服务)以及长期运行在加工车间的生产单元(包括机器agent、工人agent和工具agent)组成。
业务流程分解把生产任务队列中最优先的生产任务根据工作流实例进行分解成多个子任务,应用资源描述框架(resourcedescriptionframework)定义执行各个子任务的rdf描述文档[3],创建执行子任务所需要的应用软件包(知识、数据和功能代码),应用xml定义执行整个生产任务的工作流文档wokflow.dtd。
然后由工作流引擎根据定义好的工作流文档发布任务,具有生产能力的车间调度器pm(plantmediator)向工作流引擎请求任务,根据pm的生产能力,工作流引擎发放任务,pm完成作业任务后,把作业结果提交生产管理部门,经认可后提交中央存储器,以便其他用户查询访问,同时复制作业结果数据提交作业簿登记,工作流引擎根据作业进展情况发放下一道工序任务。
2.1业务流程建模模块(1)分解任务和定义任务制造企业中的作业主要分为加工和装配,因此针对每个产品的零件组成的先后顺序,可以画出生产作业流向图。
流向图中的每一个节点代表一个零件(或装配件),曲线箭头方向代表两个节点优先次序,流向图中的节点数就是可分解的子任务数(如图3)。
针对每一个子任务使用rdf对其定义[3],定义子任务rdf文档目的一是定义工作流模板时可以引用,二是机器agent使用xml解析器解析后可以执行该任务。
从流向图可以明确看出,哪些任务是并行执行,哪些任务必须串行执行,哪些任务是条件执行,为下一阶段制定生产任务工作流奠定基础。
(2)定义工作流摸板工作流描述执行子任务的次序、应用软件、输入和输出数据类型及工作方式,工作方式定义本任务与其他任务的关系是串行还是并行。
定义好的工作流信息以文件的方式存储在中央生产数据库中,以便工作流引擎发放任务。
在描述工作流时,所有被执行的任务和任务划分原则都必须以一定的语法定义。
本系统采用xml定义工作流处理过程,其他具有解析xml的agent组件能够相互访问,xml并不能直接作用于工作流处理,它很容易产生出一种特殊的能够描述工作流过程的标识语言,比如dtd和其他文档类型。
但是如果各个企业使用自己所定义的xml类型描述自己的工作流,那么工作流的交互性就不能得到保证。
因此一个开放的智能制造系统的工作流描述要求使用统一的规范和标准。
定义工作流的dtd文档是由许多模块组成,模块中包含任务名称、数据(执行该任务的输入输出数据)、代码(执行该任务的软件程序)。
我们定义4种模块类型:1)序列型,列表中的任务按照顺序执行;2)全并行型,列表中的任务全部完成后执行下一步操作;3)部分并行型,列表中的任务部分完成后执行下一步操作;4)条件型,任务的执行受条件表达式(外部环境)控制。
从图3中不难看出,在获得请求任务后,部件加工任务taskp01、taskp2、taskp3、taskp4和taskp5是部分并行执行的,即taskp01完成后顺序执行taskp1,taska1是条件型执行的,只有列表中的任务taskp1和taskp2完成后才执行taska1。
taska2是条件执行的,taskp3和taskp4全部完成后执行taska2。
taska6的执行也是条件型,即taska1、taska2和taskp5完成后执行taska6。
(3)软件包在加工生产之前,机器agent所需的软件包(数据、知识和功能代码)应该准备好。
机器agent向工作流引擎请求任务,工作流引擎机器agent请求后,发放执行本次任务软件包的地址,机器agent在获取所需的数据、知识和功能代码后,自动安装,改变自身功能后就可以开始工作。
2.2工作流执行控制模块工作流执行控制模块由调度算法、生产数据库、中央调度器(工作流引擎)、跟踪监测服务、作业簿记组成。
(1)“推”和“拉”作业调度算法为了高效完成生产任务,把网络中所有可用资源(加工、装配、运输)进行优化组合,找到最合理的资源分配方式和资源调度策略,这就需要调度算法。
网络中对各种资源的约束很多,有些甚至是非线性的,要达到的调度目标也很多,比如要时间最少、代价最小、资源利用率最高等,有些目标相互矛盾,对于这种多目标多约束的问题要找到满足所有约束和目标的全局最优解是很困难的。
资源调度算法[5]在智能制造系统中起着举足轻重的作用,在系统设计时就要考虑资源调度采用的算法。
就面向资源和作业任务而言,资源调度算法分为“推”式和“拉”式两种,“推”式算法称为面向资源的调度算法,而“拉”式算法称为面向作业任务的调度算法[4]。
在“推”式算法中,针对每一次作业任务,调度器考虑所有网络资源的能力、状态,寻求完成作业任务的最优化方案,把任务分给选定的生产单元去执行。
整个过程中调度器是主动行为,生产单元是被动行为。
在“拉”式算法中,生产任务确认后,按照优先顺序放于等待队列中。
一旦生产单元空闲,就主动向调度器请求任务,调度器根据生产单元的能力、状态,发放合适的作业任务。
整个过程中生产单元是主动行为,调度器是被动行为。
“推”、“拉”式算法各有优缺点:“推”式算法针对每一次作业任务需要经常收集整个网络资源的能力状态信息,最大限度地使用了生产单元,这是其优点;但网络通信频繁,容易造成网络通信堵塞,适用于中小型制造企业。
“拉”式算法采用分散处理,加强了整个系统的稳定性,由于空闲单元立即请求作业任务,这样不但提高资源利用率,而且自然地解决了系统负载平衡问题。
但对资源利用和作业计划只可能是局部优化解,而不是全局优化解。
“推”、“拉”式算法是相辅相成的,本系统在主体采用“拉”式算法的基础上,中央调度器根据生产运作状态,有权向生产单元分配任务,监督生产单元的运作行为。
(2)生产数据库生产数据库是执行控制模块的主要依据,生产任务的工作流文档和所有生产任务的描述信息都存在生产数据库中,工作流引擎根据工作流文档发放任务,启动一个工作任务。
(3)工作流引擎工作流引擎是执行控制模块最重要部件,其作用是根据当前系统负载状况对系统内的作业进行动态优化调度。
本系统在主体采用“拉”式算法,空闲生产单元首先向工作流引擎请求作业任务,工作流引擎根据生产单元的行为能力,从任务队列中选择相应的任务发放生产单元。
(4)检测服务生产单元在整个生产过程中,一直向检测服务器发送信息,报告作业进展情况,这些信息存储在生产数据库中,一旦某个作业因其他原因(如机器故障)未完成,工作流引擎重新发布该作业中心,根据作业进展情况确定由其他生产单元继续工作或重新开始。
(5)作业簿记每当一个作业任务完成后,生产单元通过向作业簿记服务器发送一条xml信息进行登记注册,所有的生产结果描述信息在被生产管理部门检验之前都存放在缓冲区中,经检验之后,生产结果元数据被送到簿记数据库中。
生产结果元数据可以被其他生产单元查询,作为下一个作业任务的输入数据。
2.3生产车间每个生产车间都包含有一个车间调度器和可调用的资源agent(例如机器agent、工人agent和工具agent),如图4所示:车间调度器考虑本站点等待任务队列状况,当等待任务队列低于规定的下限时,开始向工作流引擎申请作业任务,获取任务后,发布作业信息,由资源agent请求任务。
资源agent在获取所需的数据、知识和功能代码后,自动安装,改变自身功能,就可以开始工作,车间调度器把作业的进展状态信息发送给检测服务器(monitoringservice),任务完成后,车间调度器把完成的作业信息发送给簿记服务器和中央生产数据库中,以便生产调度器更新任务队列。
3结束语毫无疑问,智能化是制造自动化的发展方向,在制造过程的各个环节几乎都广泛应用人工智能技术。
专家系统技术可以用于工程设计、工艺过程设计、生产调度、故障诊断等。
也可以将神经网络和模糊控制技术等先进的计算机智能方法应用于产品配方、生产调度等,实现制造过程智能化。
而人工智能技术尤其适合于解决特别复杂和不确定的问题。
但是,要在企业制造的全过程中全部实现智能自动化,还有许多工作要做。
本文讨论的只是在企业生产过程实现智能化,为在企业制造的全过程全部实现智能化、自动化开拓了新的思路。
