激光智能制造系统中同步控制的实现’摘要:分析了激光智能制造系统中同步控制问题,利用现场总线机制和串口通讯机制实现控制计算机对机器人系统和激光器系统的同步控制:设计外围控制电路,实现在加工过程中控制计算机对系统的状态监视和故障处理;运用多线程程序机制设计应用程序,实现控制计算机对整个系统的实时与同步控制。
所设计的系统运行稳定,满足了实际工程应用的要求。
关键词:同步控制激光智能制造系统多线程0前言集成化激光智能制造系统l[]是由5个相对独立的子系统:5轴机器人系统,激光器系统,智能测量系统,外围控制设备和控制计算机及软件系统所组成。
控制计算机控制机器人手臂按照加工路径运动,同时控制激光器的工作状态,通过外围控制电路来监视整个系统,对加工故障及时做出相应的处理动作。
机器人系统,激光器系统和控制计算机都有各自的时钟系统,因此如何有效的协调各个子系统之间的运作,达到实际工程应用所要求的同步性,这在集成化激光智能制造系统中是一个关键问题。
关于不同系统之间的协调控制的文献并不多见。
参考文献2[」提出了利用射频振荡器产生高频信号作为统一的控制时钟来实现对短时脉冲激光和同步加速放射器的皮秒级同步控制的方法。
而本系统中的激光器是以自己的时序工作的,不受外部时钟控制,是一个相对独立的系统,同时考虑到如频繁启动,停止激光器会影响其使用寿命,因此,应设计控制电路以获得激光工作状态,从而控制机器人系统的运动以达到两者的同步运作。
解决激光智能制造系统中的同步性问题需要考虑如下几个难点问题:①激光器发射激光脉冲频率与机器人运动速度如何匹配。
②在加工过程中如何快速的检测到系统故障,使整个系统及时停止运作。
③控制计算机如何实时得到机器人位置和姿态值。
④控制计算机在加工开始时如何及时启动激光器发射激光脉冲和在加工结束时如何及时关闭激光器。
⑤故障检测线程和其他线程之间如何达到同步。
⑥应用程序与机器人底层程序之间如何达到同步通信。
激光器工作参数与机器人运动参数分析激光器与机器人在加工过程中要达到同步必须要设定合适的参数。
该系统采用的是由德国的通快公司(trumpf)生产的haas一hlzo06d连续激光器,最大功率可达到zkw,脉宽分辨率可达lms。
机器人系统是由沈阳新松自动化股份有限公司(siasun)生产的5轴机器人系统,x和y轴速度范围为0.15一33mn亡s。
由于考虑到由冲击引起的振动会影响加工精度以及机器使用寿命问题,实际采用的速度为30ri川刀s。
加工过程中,需要激光脉冲频率高,机器人运动速度快,这样加工的时间就短。
但实际测试表明,当机器人速度超过50mn岁s时,机器人的轴受到较大冲击,激光头有较大振动而引起加工误差。
机器人的运动方式采用的是点到点(pt)p的方式,从一个点到另一个点一般分3个阶段:加速,匀速,减速。
加工过程中加工一个点分为两个阶段:机器人运动而激光器停止发射脉冲阶段tl,机器人停止运动而激光器发射脉冲阶段勺。
如果激光器频率设置过大,在加工过程中机器人运动速度有上限值,那么激光器在加工点之间就会发射激光脉冲,不能满足加工要求。
令级为激光器和机器人同步时间(约为60ms),机器人上限速度为v,点到点之间的距离为d,机器人加速减速时间为勺,则激光最大频率为例如在该系统中上述参数为:d=.33mm/s,赴二110srn,t3=32ms,t4=60ms,v=30mn岁s,则几ax七3hz。
当激光频率设定为2hz,机器人速度设为3oit止田口s时,系统能够很好的实现同步运作。
2机器人系统与激光器系统之间的同步激光器系统和机器人系统是两个相互独立的系统,内部都有各自的时钟系统,激光器和机器人如何协调工作是整个系统的关键技术之一。
一旦启动激光器脉冲工作方式,激光脉冲就会以一定的频率发射,在加工过程当中一般使激光器独立工作,设计外部电路,使得机器人根据激光器的工作状态确定自身的运动情况。
为解决机器人系统与激光器系统之间的同步问题,首先借助于光电探测装置,把探测得到的光电信号转换成电压信号,之后把此信号传输给机器人控制柜中的fo口。
当机器人底层程序的等待指令结束,程序解释缓冲区中的运动指令并发向各个轴的伺服包,解释完毕,底层程序又处于等待状态;各个轴的伺服包分别驱动机器人的5个轴,使机器人产生运动,此时激光器处于不出光状态;当机器人运动结束,便处于等待状态,等待下一个激光信号,此过程如时序图所示(图l)。
其中t0为机器人底层程序查询fo高电平时间,一般为一个指令周期(16ms之内),tl表示机器人系统机械响应时间,在30几个ms之内,t2表示继电器响应时间,在几个ms之内3控制计算机与机器人之间的同步通信控制计算机在加工时和机器人的数据通信必须保证准确无误,否则,在加工过程中就可能产生严重后果。
因此,数据通信必须遵循一定的标准3[]。
硬件通信标准是:rs232c,9600,n,8,l;软件通信协议:协议头—oxeb,0x90,ox82;协议标志—oxfo;通信数据—如通信数据有0x90,双写0又90;协议尾—o又90,0x83;校验字节—不包括双写的0x90。
应用程序和机器人底层程序的通信是通过comm控件实现的,该控件提供了基本的机器人运动指令,查询指令,测量指令,为应用程序控制机器人提供了较为方便的接口。
数据在传输过程中,机器人底层程序和该控件采用应答方式以确保数据的准确性,因此每次发数据时都要判断底层程序是否已经对上次传送的数据产生应答。
由于控制程序运行着较多的线程,这些线程可能同时跟comm控件进行通信,如果不用线程之间的同步机制,控件通信就会出现紊乱。
可以利用操作系统的同步机制,如设立临界区,避免这种情况的发生。
由于每发一次数据应用程序和机器人底层程序都必须应答一次,这需要耗费较多的系统时间。
在应用程序中按照协议将几个数据打成数据包,每次都以数据包的形式发送数据,这样发送速度可以提高一倍,平均发送每条运动指令约占10ms。
如果发送上千条指令,要把数据全部发到机器人缓冲区中需要花费几分钟时间。
用户希望控制程序一旦发出加工指令后,整个系统应当有比较快速的反应,如果等数据全部发送到机器人缓冲区后再执行加工动作,那么就会让用户出于等待状态;另一方面,机器人缓冲区大小是有限制的,如果数据量过大,缓冲区就可能产生溢出现象。
实际上可以单独开辟一个线程来发送数据,同时在进程中启动加工命令,这样,应用程序在不断发数据的同时机器人底层程序可以不断解释缓冲区中的指令,并驱动机器人工作,可以实现应用程序和机器人并行工作,提高了系统的工作效率。
这样会产生一个问题:由于机器人执行一条运动指令需要50ms(如激光频率为2hz时),而平均每发一条运动指令需要100ms,发送速度大于执行速度,如果数据量很大,那么机器人缓冲区就可能会产生溢出现象,就会丢失加工数据。
应用程序可以在发数据时不断检测机器人缓冲区情况,一旦缓冲区剩余空间达到某个下限值时就停止发送数据,等待机器人执行指令,直到缓冲区剩余空间达到某个上限值再发数据,这样可以解决上述问题。
在加工过程中,控制计算机还需要实时的知道机器人的当前姿态值以及加工进度情况。
应用程序可以把获得的机器人姿态值发送给仿真程序,实现同步仿真;可以根据加工进度来控制激光器的开关动作。
应用程序有一个单独的线程每隔20ms就向机器人发送查询机器人姿态值命令,通过comm控件的事件响应机制,应用程序读取机器人反馈回来的姿态值。
如果此线程频繁的查询机器人姿态值的话,系统就会在查询上花费很多时间,而机器人的姿态值在加工过程中的实时性要求并不是很高,况且机器人执行一个动作是50ms,线程查询间隔采用200ms,所显示的机器人姿态值与实际值不会有滞后现象。
应用程序必须实时的把握机器人的加工进度,因为在加工的开始与结束时刻对激光器的操作的依据就是机器人当前的加工进度。
应用程序在发送加工指令的时候就记录下加工的总点数,在加工过程中通过不断查询机器人由运动到停止时在fo产生的高电平(见图2)来获得系统加工进度情况,一旦反馈的点个数达到了加工总点数就使激光器停止工作。
应用程序在加工过程中启动这个查询机器人到位线程,查询的间隔设为60ms,uo处高电平持续时间为192ms。
在机器人执行完毕最后一个运动指令时应当使激光器在发出一个脉冲后准确停止工作,而不应少发一个脉冲或者多发脉冲。
加工最后一点的时序图,如图2所示,其中tl为机器人uo口继电器响应时间,在几个ms左右,赴为线程查询时间,在60ms之内,t3为激光器和机器人同步时间,在60ms左右。
4故障检测线程的设计故障在加工过程中是难免的,对于较为严重的故障,应用程序应当能够及时发现,并且能自动采取相应措施,减小过程失误。
在加工过程中激光器按一定的频率发射激光脉冲到汽车模具表面,如果此时机器人由于故障或者由于光电检测装置出现故障而停止运动,则激光器就在模具表面同一点发射多个激光脉冲,造成损坏。
应用程序有一个故障检测线程,在加工开始时就启动它,每隔20ms就检测一次系统设备的状态,若有故障就及时处理。
下面的分析是基于这样的假定:激光频率为2hz,机器人运动的点与点之间距离为3.3rnrn,速度为30mm/s,时间单位都为毫秒计算。
现在分析如果机器人在加工过程中出现故障而停止运动(假定光电设备正常工作),线程能否及时停止激器。
如图3,tl为从激光出光到线程检测到fo口高电平(由光电信号检测到激光出光状态,外围电路置端口为高电平,直到程序检测到高电平后将它置为低电平)的时间差,小于100ms;勺为激光器与机器人的同步时间,约为60ms;朽为机器人故障点到故障前一点运动开始时的时间差。
假如故障点发生在c和d之间,那么机器人在运动完最后一点时:令激光脉宽为l,若tl十40>l时,激光器能够发射一个完整的脉冲;若tl十40<l时,激光器发射的脉冲不足所需的脉宽。
若故障点发生在b和c点之间,那么最后一个激光脉冲可能和前一个有部分交叠。
若故障点在a点和b点之间,则在最后一个点,激光可能发射两个脉冲。
再分析光电检测器发生故障的情况,如图4,若故障点在a点和b点之间,则机器人最后的运动为“运动l”,激光器在最后一点刚好发射一个完整脉宽的激光;若故障在b点和c点之间,则机器人最后的运动为“运动2”,劫二20+t,<30(t;<10),所以激光在最后一点没有发激光脉冲。
基于上面分析,故障检测线程应当能很好的处理加工过程中出现的较为严重的故障,实现系统故障时整个系统的同步性。
试验表明,线程运行的结果是符合要求的。
5加工过程的同步在加工过程中控制计算机必须对激光器和机器人实现实时控制,而且要对整个系统的状态实现实时监控,因此需要一个逻辑清晰的加工流程。
这在整个系统的运作过程中是至关重要的。
在加工过程中如果过早的启动激光器使之出于发射激光状态,就会损坏模具表面,甚至会造成危险。
应用程序是在控制计算机得到了机器人到达第一个加工点后反馈回来的信号再启动激光器的,这样就保证了激光第一个点确实落在加工点。
故障检测线程是检测加工过程中激光器、机器人、光电检测器、气源设备状态以及加工时人员安全问题,若检测到故障就会停止激光器和机器人并报警。
加工程序的停止都是由查询机器人加工进度线程来控制的,一旦该线程检测到已经加工到最后一点,就应当及时关闭激光器,机器人以及气源,并且立即停止故障检测线程的运行,否则就会产生虚假报警的情况,如图5所不。
应用程序要向机器人缓冲区发送加工数据,同时要启动激光器,对设备的状态进行实时监视,对机器人的加工进度进行查询,还要显示发送数据和加工的进度,并且要向仿真程序发送包含机器人当前姿态值的消息,如果不用多线程技术,几乎是不可能实现这样复杂的加工过程的。
加工主程序的主要任务就是启动各个线程,并且使激光器出于工作状态,之后,几个线程相互协调的开始并行运行。
加工完毕,由查询机器人加工进度线程结束各个线程,并且停止激光器和机器人的工作。
多线程使得程序具有并行处理的能力,如图5所示6结论汽车覆盖件模具制造是制约新型汽车产品开发的瓶颈,而强化汽车覆盖件模具,延长其使用寿命在汽车制造业具有重要的意义。
由激光加工技术、机器人技术和计算机智能控制技术组成的激光智能制造系统是体现光、机、电和计算机一体化的面向21世纪的先进制造系统,它为强化汽车覆盖件模具提供了有效的手段,为激光加工技术的应用开创了新的道路。
由于该系统的复杂性,为使机器人系统和激光器系统同步工作,避免任何故障,该系统采用了一系列的技术:利用现场总线技术实现了控制计算机与激光器之间的快捷通信,通过调用动态链接库编制激光控制模块,应用程序通过调用此模块实现了控制计算机对激光器的基本操作;利用串口通信机制,按照通信协议制作机器人控件,应用程序通过使用控件实现了控制计算机对机器人系统的运动控制和相互通信;调用pciskp动态链接库编写状态监视程序模块,实现控制计算机对系统状态的监视和系统故障的处理;利用iwn32多线程机制设计应用程序,实现了在加工过程中对整个系统的达到了毫秒级的同步控制。
程序运行在iwndowsz000平台上,在上海大众模具激光强化车间得到了应用,很好的满足了实际工程应用的要求,大大增强了模具的使用寿命,节约了成本。
