基于opcua的智能制造车间数据通信技术及应用摘要:为实现多种设备的数据通信和统一信息管理,提出了一种基于opc统一架构(opcua)的智能制造车间数据通信技术,对其通信原理和网络架构进行了讨论,提出了opcua与工业机器人操作系统ros和传感器嵌入式系统等设备的整合方案,并在案例研究中详细讨论了基于python语言的数据通信程序设计方法,开发了基于opcua的车间制造执行层(mes)机器人监控模块。
实际应用结果表明,基于opcua的数据通信技术具有很高的通用性和兼容性,可有效实现智能车间设备信息的数据集成和统一管理。
关键词:opc统一架构;数据通信;机器人操作系统;智能制造;信息物理系统0引言工业4.0的提出极大推动了制造业的发展,伴随着工业4.0的浪潮,制造业信息化迅速发展,车间的智能化程度日益增强,车间智能化与车间内的智能化设备有着直接的联系。
伴随车间智能化程度的提高,车间设备也更加多元化,如数控机床、工业机器人、agv、嵌入式系统设备等。
种类各异的底层设备也给车间数据采集与传输带来了如下难点:①对于智能化物联网车间,底层设备种类繁多,其通信协议也各不相同,使得车间的数据采集和通信系统的整合所需要的成本投入十分巨大;②对于各种车间信息管理系统,不同协议的信息传输直接影响各个层次间数据通信的统一管理,而这正是车间信息管理系统所追求的目标;③由于没有统一的通信协议,车间制造执行系统在设计时,只能被动地集成各种不同的通信协议,进而与底层设备相适配,这无疑提高了系统开发的难度,阻碍了整个车间信息化建设。
所以,在工业4.0万物互联的要求下,在智能车间内不同的设备之间建立一种简单可靠的统一通信模式具有重要意义,而过程控制统一对象模型(oleforprocesscontrolunifiedarchitecture,opcua)技术可以很好地解决上述问题。
opcua是一个开放的跨平台架构,由全世界30多家知名制造企业联合开发,目前已成为工业4.0中的通信标准。
opcua协议不受限于操作系统,具有很强的独立性,并且拥有很高的安全保护机制,可以确保信息通信安全可靠。
opcua还能支持各类设备复杂的数据结构通信,通过将设备的各种数据以及结构节点封装为对象来对设备信息模型进行描述,以此来实现复杂数据结构的通信。
同时,opcua服务器可以通过将底层设备的实时数据传输给opcua客户端,并提供历史数据查询来实现设备的远程监控[1]。
刘洋等[2]对基于消息代理的opcua发布订阅模式进行了研究。
王民等[3]对基于opcua的数字化车间信息交互模型进行了研究。
顾岩等[4]设计了基于opcua的3d实时监控系统。
在企业应用方面,abb、爱默生、罗克威尔、西门子等企业已经实现了opcua应用程序的开发和应用。
德国在“阿尔法文图斯”海上风电厂并网发电项目中采用opcua技术,在scada系统中进行数据采集和监控[5]。
近年,国外一些自动化设备大厂(如西门子)已经将opcua的整套服务集成在产品之中,但这些opcua系统较为封闭,不适合二次开发。
与国外相比,opcua在我国的应用还处于初级阶段。
目前国内市场上还很少看到成熟的opcua产品,但opcua技术已被国内许多工业控制软件开发者所认可,opcua技术在智能制造车间的应用前景十分广泛[6]。
本文提出了一种基于opcua的车间信息物理系统通信架构,实现了车间设备的数据采集和通信,为智能制造车间提供了一种更为安全可靠的通信机制。
1基于opcua的数据通信网络架构1.1opcua的通信模式opcua是一种不依赖于平台且具有更高安全性和可靠性的标准。
opcua为自动化生产系统提供了新的信息模型和抽象体系结构,构建了一个统一的对象模型,解决了平台依赖关系问题,添加了命名空间机制,并将复杂的数据类型嵌入服务器地址空间中,同时还能支持大量的通用服务。
opcua技术使用面向服务的体系结构(service-orientedarchitecture,soa)来实现数据交换,通过通信堆栈发送信息,支持用于通信的http/uatcp协议,只要端口允许,opcua就可以通过任何端口发送数据。
地址空间是opcua的核心概念,组成地址空间的基本单位是节点,即实际设备在地址空间中的映射,地址空间为各类设备提供了统一的抽象模型,通过抽象模型实现了对节点的统一管理[7-9]。
节点由属性与引用两部分构成,节点的结构和节点之间的关系如图1所示。
数据编码就是将包含其自身输入和输出参数的服务消息序列化为网络格式。
目前,opcua规定了两种编码方法,即ua二进制编码和xml编码。
在工业控制系统中,实时性能和生产线开销往往是人们关注的一个重要问题。
随着设备整合的高速发展,数据传输量日益增加,因此,ua工作组为适应工业领域的环境定义了ua二进制代码。
ua的二进制编码只占用数据线上的较小体积并能实现高速数据编码和解码。
opcua映射到通信协议(例如tcp传输控制协议),能以不同形式的编码(例如,ua二进制格式或xml等)发送数据,并且可以标准化各种系统和设备接口,以便在所有网络中实现它们之间的无障碍通信。
由于opcua基于tcp/ip协议,采用三次握手原则来建立通信,故确保了数据传输的可靠性。
opcua通信模式如图2所示。
1.2opcua信息交互网络架构将opcua技术运用于车间的实现方法是将opcua服务器嵌入各类底层设备之中,对各类底层设备所采集的数据通过服务器转换为支持opcua协议的数据。
当车间制造执行层(manufaturingexecutionsystem,mes)从数据采集与监控(supervisorycontrolanddataacquisition,scada)系统获取数据或信息时[10],采用联合服务器和客户端的概念,opcua客户端和opcua服务器之间的通信使用请求/响应机制。
当服务器调用服务时,客户端必须向服务器发送请求消息。
处理完请求后,服务器将回复消息发送回客户端。
在客户端和服务器之间发送的信息和数据必须首先通过相应的消息模式的格式检查,并由客户端或服务器通过适当的分析来获取所需的信息。
基于opcua的信息交互网络框架如图3所示。
opcua信息交互网络架构分为以下3层:①底层。
底层是由生产加工设备、生产辅助设备和传感器构成的设备层。
在这一层,设备的基本数据和状态数据首先封装在opcua服务器中,然后通过opcua的订阅/发布或查询模式传输到高层的应用程序。
②通信层。
通信层连接底层设备和管理信息系统,连接企业外部的互联网和各种云应用,同时,通信层的设备控制网络和企业信息网络也向融合的方向发展。
③信息管理层。
该层的作用是根据车间业务流程的需要,通过opcua客户端收集设备层的数据,存储在企业本地数据库、云数据库或其他应用系统中,从而实现企业资源计划(enterpriseresourceplanning,erp)、mes的业务应用。
从该数据采集框架中可以看出,opcua不仅仅是工业领域通用的数据传输标准,而且,它还通过信息模型的封装实现了智能制造车间各层之间的数据语义统一,因此,opcua又被称为工业4.0的基础,对实现车间信息物理系统(cyberphysicalsystem,cps)具有重要的作用[11-14]。
2基于opcua的车间数据通信的实现在实际的车间生产过程中,使用的自动化设备不尽相同,所产生的数据类型也种类繁多,给车间的设备监控和信息化管理带来很大的障碍,为了将这些底层数据统一进行传输和管理,本文选用opcua技术来完成这一目标。
但是对于中小企业,采用opcua技术进行数据交互通信往往需要购买专业化设备,并使用配套的通信模块,这对于中小企业来说成本较高,难以实施,故本文提出一种适合于中小企业的基于opcua技术的车间信息通信方案。
对于底层设备,数据采集往往使用c/c++语言编程来实现,而对于上层的监控系统和web应用,往往采用java语言编程实现,为了方便结合这两种语言,本文采用python语言来实现opcua编程。
2.1数据通信流程基于opcua架构的车间数据通信的设计思想如下:将种类繁多的底层设备如机器人、传感器、plc设备、数控机床、agv等所采集到的数据全部采用opcua格式标准进行封装和传输,以此来统一管理底层设备信息,通过opcua统一架构存入数据库中,再由mes、erp等上层应用系统来调用,完成对底层设备的监控和业务应用,也可以将这些信息存入云端,供今后进行大数据分析使用。
基于opcua架构的车间数据采集系统如图4所示。
图4中,车间数据通信的具体流程如下:①对每个不同的底层设备所需要传递的信息分别建立信息模型结构,确定需要对外暴露的信息以及信息的层级结构;②根据所需要的底层设备信息在数据中心构建数据库;③使用python语言,调用opcuaapi,针对不同的底层设备建立对应的opcua服务器;④将需要传输的底层设备数据根据信息模型装入opcua服务器的节点中,使用opcua通信协议将数据封装发出;⑤在上层信息管理系统中,使用python语言构建opcua客户端,对底层传输来的信息进行解析,然后将其存入数据库;⑥上层应用系统从数据库中读取数据,完成设备监控和业务应用操作。
数据通信流程如图5所示。
2.2opcua与ros的结合在智能化工厂中,工业机器人的使用得到了广泛的普及,工业机器人操作系统一般使用ros(robotoperatingsystem)。
ros系统是由斯坦福大学人工智能实验室开发的基于linux系统的机器人软件控制平台,不同于传统的linux操作系统,ros属于二级操作系统,它提供了一个结构化的通信层。
作为机器人操作平台,ros通信主要有以下特点:①节点。
节点是ros执行各种功能的程序进程,进程以节点的形式运行。
节点之间的通信是通过消息的发布和订阅来实现的;②消息。
消息是节点间通信的内容。
ros支持多种消息类型,如pointcloud、map信息等[15]。
③主题。
主题是指特定消息的名称,用于描述消息的内容。
节点可以发布某个主题的数据消息,或者订阅某个主题的数据。
④服务。
服务和主题之间的区别在于主题可以由多个节点订阅,但是服务在形式上是一对一的,即在节点之间建立服务之后,它的通信模式通常是一种请求模式和一种响应模式[16]。
ros与许多编程语言兼容,如c/c++、python、java、lisp等。
它还具有跨语言和跨平台的能力,大大提升了机器人开发的可移植性,使得机器人开发变得更加便捷。
图6所示为ros中话题和节点之间的关系。
鉴于ros的上述特点,尤其是跨平台性以及节点通信和消息发布订阅模式,非常适合与opcua架构相结合。
ros系统与opcua结合通信思路如下:在ros系统中将需要传输的数据作为话题发布,再对这些话题进行订阅,将订阅得到的话题中的数据进行封装,放到opcua服务器的节点中,再根据建立的信息模型对这些节点进行封装,利用opcua通信协议传输到上层,由上层的opcua客户端对信息进行解析后存入数据库。
2.3opcua与传感器的结合在智能制造车间中,还存在着大量的传感器,这些传感器所采集到的设备数据往往存在于嵌入式系统中,如树莓派、arm等,也很有必要被统一化管理。
opcua与传感器结合进行数据通信的思路如下:将传感器连接树莓派等硬件系统,并在树莓派系统中集成opcua服务器,对传感器所采集的数据进行建模,并将这些数据封装到opcua服务器节点中,与上层opcua客户端通过opcua协议通信,这样便实现了传感器数据的统一通信管理。
以转速传感器为例,可以将该传感器与树莓派硬件开发板相连接,使用c语言编程实现数据采集,然后将该c语言代码作为python的api库进行加载,在python代码中根据实际需求建立opcua客户端,将采集到的数据进行封装,然后使用opcua协议进行通信。
不论工业机器人ros系统,还是底层传感器嵌入式设备,或者数控机床、plc、agv等,都可以使用opcua进行通信。
使用opcua可以很好地兼容各类底层设备及其操作系统,对这些设备的数据进行整合,真正实现只用一种通信方式就能够统一智能工厂多设备多类型的数据采集和通信,为智能工厂的信息化管理提供了很大便利。
基于opcua架构的智能工厂通信架构图见图7。
图7中,该工厂底层设备由agv小车、数控机床、机器人、plc设备和传感器构成,这些底层设备全都集成了opcua服务器。
将设备所采集到的信息封装入opcua服务器中,使用opcua通信协议通过wifi与opcua客户端进行通信,实现了多种数据类型的通信统一,opcua客户端得到底层数据后,将数据存放在云端数据中心,供管理信息系统(如mes、erp)使用。
3案例研究某智能制造车间在实施制造执行系统时需要对车间内的数台六轴工业机器人和plc控制设备的运行状态进行实时监控,但对于这些不同厂商生产的工业机器人,其控制系统和数据传输方式各不相同,若采用传统的数据采集和通信方式实现统一的集成化管理比较困难。
通过实际调查发现,这些不同厂家的工业机器人都是通过ros系统来实现开发和控制的,机器人运行的各项参数(如关节电机的转速、机械手臂的位置等信息)在ros系统中都可以查询到,因此可以采用opcua通信技术和ros系统结合实现该车间所有工业机器人的监控。
同理,plc、传感器等嵌入式控制设备也可以采用opcua架构来实现数据采集和通信。
基于opcua架构的车间数据采集和通信方案如图8所示。
该框架分为三层,即硬件系统层、服务器层和管理系统层。
硬件系统层包括传感器、plc、机器人、c语言数据采集程序、python获取数据程序、ros系统和opcua服务器,服务器层包括opcua客户端和mysql数据库,管理系统层包括客户端pc和mes系统,硬件系统层和服务器层之间通过opcua协议进行通信。
数据在各层间的传递过程如下:首先在硬件系统层中,对于传感器和plc,将c语言数据采集程序作为库文件加载到python程序中,然后使用python来调用该程序获取传感器数据,再将采集到的数据封装入opcua服务器中。
对于ros机器人,使用ros系统发布机器人信息话题,再使用python程序订阅该话题,并将数据封装入opcua服务器中。
在服务器层中,opcua客户端通过opcua协议与硬件系统层的opcua服务器进行通信,将得到的数据存入mysql数据库中,供管理系统层的mes使用。
基于opcua架构的ros系统工业机器人通信流程如图9所示。
首先构建机器人信息模型,再根据所建立的模型使用python语言代码构建opcua服务器,使opcua服务节点与机器人信息模型一一对应。
同时在机器人ros系统中将机器人的关节电机转速等信息作为话题进行发布,然后在python代码中对机器人关节话题进行订阅,并将订阅得到的信息存入opcua服务器的对应节点中,opcua服务器与客户端通过opcua协议进行通信,opcua客户端获取数据后将数据存放到数据库中,再由erp、mes等软件来使用这些数据。
编程时,opcua服务器先暴露其ip地址和端口号,然后与opcua客户端进行连接,连接成功后使用opcua协议格式通信。
opcua客户端接收数据时,可以直接从opcua服务器定义的信息模型中取出对应的节点数据,这些数据对客户端而言是语义已知的,故可以直接存入数据库所建表的对应字段中。
mes等上层应用系统只需从数据库中读取数据即可。
opcua服务器的部分关键python代码如下:server=server()#新建opcua服务器;url=“opc.tcp:∥192.168.18.134:4841”server.set_endpoint(url)#定义服务器的地址和端口号;name=“opcua_simulation_server”addspace=server.register_namespace(name)#定义地址空间;node=server.get_objects_node()param=node.add_object(addspace,“parameters”)#定义节点;moto1=param.add_variable(addspace,“moto1”,0)#数据封装入节点;opcua客户端的部分关键代码如下:conn=cx_oracle.connect(‘cjpt/123456@localhost/mes’)#指定所需连接的数据库;url=“opc.tcp:∥192.168.18.134:4841”client=client(url)#指定opcua服务器的地址和端口号;client.connect()#请求连接;#获取节点中的数据;whiletrue:mos1=client.get_node(“ns=2;i=2”)motorspeed1=mos1.get_value()print(motorspeed1)上述代码运行后,先在设备端建立opcua服务器,并订阅ros系统发布的机器人驱动电机状态话题。
然后,建立opcua客户端,采用循环请求的方式获取服务器中的数据。
服务器与客户端之间采用opcua协议进行数据通信,确保数据传输的可靠性。
图10所示为采用opcua通信方案实现的该车间工业机器人监控界面。
4结论本文从实际需求出发,创造性地将opcua通信架构与工业机器人ros系统、传感器嵌入式系统以及plc控制系统等进行整合,实现了车间内不同厂家的工业机器人、plc设备、各种嵌入式设备之间的数据通信的统一操作,使得车间数据采集和信息传输更加简便可靠。
基于opcua的技术特性,该架构能很好地支持各种自动控制设备的通信,具有很高的通用性和兼容性,实现了智能车间设备信息的集成管理,在保证拥有良好性能的同时又兼顾了可扩展性。
与市面上各大公司推出的opcua专用通信模块相比,该架构具有良好的二次开发能力,可以对特定工厂环境进行高度定制开发,并且实施方法简便,成本低廉。
本文研究结果为工业4.0时代车间信息的采集、传输和存储提供了统一的信息传输架构,为实现数据驱动的智能制造服务打下了良好基础。
